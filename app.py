import streamlit as st
import tempfile
import os
import json
import time
import docx  # Required to create .docx files dynamically

from AI_asistant import *
from file_converter import parse_file
from generate.test1 import quick_generate
from process_data import *


# --- Mock Functions (placeholders for your actual modules) ---
# These functions simulate the behavior of your imported modules,
# allowing this script to run standalone for testing purposes.


DATA_FILE = "documents.json"

st.set_page_config(page_title="AI –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", layout="wide")

# --- Initialize session_state ---
if "messages" not in st.session_state:
    st.session_state.messages = []
if "documents" not in st.session_state:
    if os.path.exists(DATA_FILE):
        try:
            with open(DATA_FILE, "r", encoding="utf-8") as f:
                st.session_state.documents = json.load(f)
        except (json.JSONDecodeError, FileNotFoundError):
            st.session_state.documents = []
    else:
        st.session_state.documents = []

st.title("AI –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")

# --- Sidebar for document management ---
with st.sidebar:
    st.header("–°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
    if st.session_state.documents:
        for doc in st.session_state.documents:
            st.markdown(f"üìÑ {doc['name']}")
    else:
        st.info("–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")

    st.divider()

    st.header("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏")
    uploaded_file = st.file_uploader("‚ûï –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç",
                                     type=["pdf", "docx", "doc", "txt", "html", "htm"])

    if uploaded_file is not None:
        with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(uploaded_file.name)[1]) as tmp:
            tmp.write(uploaded_file.getbuffer())
            temp_path = tmp.name

        try:
            parsed_text = parse_file(temp_path)
            if uploaded_file.name not in [d['name'] for d in st.session_state.documents]:
                st.session_state.documents.append({
                    "name": uploaded_file.name,
                    "content": parsed_text
                })
                process(parsed_text, uploaded_file.name.split('.')[0])
                st.success(f"‚úÖ –§–∞–π–ª {uploaded_file.name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                with open(DATA_FILE, "w", encoding="utf-8") as f:
                    json.dump(st.session_state.documents, f, ensure_ascii=False, indent=2)
                st.rerun()
            else:
                st.warning(f"–§–∞–π–ª —Å –∏–º–µ–Ω–µ–º {uploaded_file.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        finally:
            os.remove(temp_path)

    st.divider()

    # --- Document Generation Section ---
    st.header("üìë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")

    if st.session_state.documents:
        # üîë –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ .docx —Ñ–∞–π–ª—ã –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        docx_doc_names = [
            doc["name"] for doc in st.session_state.documents if doc["name"].lower().endswith(".docx")
        ]

        if docx_doc_names:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º UI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∞–π–ª—ã
            selected_doc_name = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (.docx):",  # –û–±–Ω–æ–≤–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
                options=docx_doc_names
            )

            generation_prompt = st.text_area(
                "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?",
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –°–æ–∑–¥–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∫—Ä—É–∂–∫–∏-–Ω–µ–ø—Ä–æ–ª–∏–≤–∞–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.",
                height=100
            )
            output_filename = st.text_input(
                "–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:",
                value="–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π_–¥–æ–∫—É–º–µ–Ω—Ç.docx"
            )

            if st.button("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç"):
                if not selected_doc_name:
                    st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç!")
                elif not generation_prompt.strip():
                    st.warning("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å!")
                elif not output_filename.strip():
                    st.warning("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞!")
                else:
                    with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç..."):
                        lst = search(generation_prompt)
                        generation_prompt += '–¥–æ–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:' + dop_prompt(generation_prompt,lst)

                        # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                        temp_input_path = None
                        temp_output_path = None
                        try:
                            selected_doc_data = next(doc for doc in st.session_state.documents if doc["name"] == selected_doc_name)
                            doc_content = selected_doc_data['content']
                            temp_doc = docx.Document()
                            temp_doc.add_paragraph(doc_content)

                            with tempfile.NamedTemporaryFile(delete=False, suffix=".docx") as temp_input_file:
                                temp_input_path = temp_input_file.name
                                temp_doc.save(temp_input_path)

                            with tempfile.NamedTemporaryFile(delete=False, suffix=".docx") as temp_output_file:
                                temp_output_path = temp_output_file.name

                            quick_generate(
                                input_doc=temp_input_path,
                                prompt=generation_prompt,
                                output_doc=temp_output_path,
                            )

                            with open(temp_output_path, "rb") as f:
                                doc_bytes = f.read()

                            st.success("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                            st.download_button(
                                label="üì• –°–∫–∞—á–∞—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç",
                                data=doc_bytes,
                                file_name=output_filename,
                                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                            )
                        except Exception as e:
                            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                        finally:
                            if temp_input_path and os.path.exists(temp_input_path):
                                os.unlink(temp_input_path)
                            if temp_output_path and os.path.exists(temp_output_path):
                                os.unlink(temp_output_path)
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ—Ç .docx —Ñ–∞–π–ª–æ–≤
            st.warning("–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç —Ñ–æ—Ä–º–∞—Ç–∞ .docx.")

    else:
        st.info("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é.")


# --- Chat Message History ---
for msg in st.session_state.messages:
    avatar = "üßë" if msg["role"] == "user" else "ü§ñ"
    with st.chat_message(msg["role"], avatar=avatar):
        st.markdown(msg["content"])

# --- Chat Input Field ---
if prompt := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user", avatar="üßë"):
        st.markdown(prompt)

    with st.chat_message("assistant", avatar="ü§ñ"):
        with st.spinner("–ò—â—É –æ—Ç–≤–µ—Ç..."):
            docs = [doc["content"] for doc in st.session_state.documents]
            answer = get_final_answer(prompt, docs)
            st.markdown(answer)
            st.session_state.messages.append({"role": "assistant", "content": answer})

